{
  "parser": "babel-eslint",
  "rules": {
    // Possible Errors
    "no-await-in-loop": 1,           // disallow await in loop
    "no-compare-neg-zero": 2,        // disallow comparing against -0
    "no-cond-assign": 2,             // disallow assignment in conditional expressions
    "no-console": [1, { allow: ["warn", "error"] }], // disallow use of console in the node environment
    "no-constant-condition": 2,      // disallow use of constant expressions in conditions
    "no-control-regex": 2,           // disallow control characters in regular expressions
    "no-debugger": 2,                // disallow use of debugger
    "no-dupe-args": 2,               // disallow duplicate arguments in functions
    "no-dupe-keys": 2,               // disallow duplicate keys when creating object literals
    "no-duplicate-case": 2,          // disallow a duplicate case label.
    "no-empty-character-class": 2,   // disallow the use of empty character classes in regular expressions
    "no-empty": 2,                   // disallow empty statements
    "no-ex-assign": 2,               // disallow assigning to the exception in a catch block
    "no-extra-boolean-cast": 2,      // disallow double-negation boolean casts in a boolean context
    "no-extra-parens": [             // disallow unnecessary parentheses
      1,"functions"
    ], 
    "no-extra-semi": 2,              // disallow unnecessary semicolons (fixable)
    "no-func-assign": 2,             // disallow overwriting functions written as function declarations
    "no-inner-declarations": 2,      // disallow function or variable declarations in nested blocks
    "no-invalid-regexp": 2,          // disallow invalid regular expression strings in the RegExp constructor
    "no-irregular-whitespace": 2,    // disallow irregular whitespace outside of strings and comments
    "no-negated-in-lhs": 2,          // disallow negation of the left operand of an in expression
    "no-obj-calls": 2,               // disallow the use of object properties of the global object (Math and JSON) as functions
    "no-regex-spaces": 2,            // disallow multiple spaces in a regular expression literal (recommended)
    "no-sparse-arrays": 2,           // disallow sparse arrays (recommended)
    "no-unexpected-multiline": 2,    // Avoid code that looks like two expressions but is actually one
    "no-unreachable": 2,             // disallow unreachable statements after a return, throw, continue, or break statement (recommended)
    "use-isnan": 2,                  // disallow comparisons with the value NaN (recommended)
    "valid-jsdoc": 0,                // Ensure JSDoc comments are valid
    "valid-typeof": 2,               // Ensure that the results of typeof are compared against a valid string (recommended)

    //Best Practices
    "accessor-pairs": 1,             // Enforces getter/setter pairs in objects
    "array-callback-return": 1,      // enforce return statements in callbacks of array methods
    "block-scoped-var": 1,           // treat var statements as if they were block scoped
    "class-methods-use-this": 1,     // enforce that class methods utilize this
    "complexity": 1,                 // specify the maximum cyclomatic complexity allowed in a program
    "consistent-return": 1,          // require return statements to either always or never specify values
    "curly": [1, "multi-line"],      // specify curly brace conventions for all control statements
    "default-case": 1,               // require default case in switch statements
    "dot-location": [1, "property"], // enforces consistent newlines before or after dots
    "dot-notation": 1,               // encourages use of dot notation whenever possible
    "eqeqeq": 1,                     // require the use of === and !== (fixable)
    "guard-for-in": 0,               // make sure for-in loops have an if statement
    "no-alert": 1,                   // disallow the use of alert, confirm, and prompt
    "no-caller": 1,                  // disallow use of arguments.caller or arguments.callee
    "no-case-declarations": 1,       // disallow lexical declarations in case clauses
    "no-div-regex": 1,               // disallow division operators explicitly at beginning of regular expression
    "no-else-return": 1,             // disallow else after a return in an if
    "no-empty-function": 1,          // disallow empty functions
    "no-empty-pattern": 1,           // disallow use of empty destructuring patterns
    "no-eq-null": 1,                 // disallow comparisons to null without a type-checking operator
    "no-eval": 1,                    // disallow use of eval()
    "no-extend-native": 1,           // disallow adding to native types
    "no-extra-bind": 1,              // disallow unnecessary function binding
    "no-extra-label": 1,             // disallow unnecessary labels
    "no-fallthrough": 1,             // disallow fallthrough of case statements (recommended)
    "no-floating-decimal": 1,        // disallow the use of leading or trailing decimal points in numeric literals
    "no-implicit-coercion": 0,       // disallow the type conversions with shorter notations
    "no-implicit-globals": 1,        // disallow variable and function declarations in the global scope
    "no-implied-eval": 1,            // disallow use of eval()-like methods
    "no-invalid-this": 1,            // disallow this keywords outside of classes or class-like objects
    "no-iterator": 1,                // disallow usage of __iterator__ property
    "no-labels": 1,                  // disallow use of labeled statements
    "no-lone-blocks": 1,             // disallow unnecessary nested blocks
    "no-loop-func": 1,               // disallow creation of functions within loops
    "no-magic-numbers": 0,           // disallow the use of magic numbers
    "no-multi-spaces": [1,{          // disallow use of multiple spaces (fixable)
      exceptions: {
        "ImportDeclaration":  true,
        "VariableDeclarator": true,
        "Property": true
      }
    }],
    "no-multi-str": 1,               // disallow use of multiline strings
    "no-new": 1,                     // disallow new operators outside of assignments or comparisons
    "no-new-func": 1,                // disallow use of new operator for Function object
    "no-new-wrappers": 1,            // disallows creating new instances of String,Number, and Boolean
    "no-octal": 1,                   // disallow use of octal literals (recommended)
    "no-octal-escape": 1,            // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    "no-param-reassign": 1,          // disallow reassignment of function parameters
    "no-proto": 1,                   // disallow usage of __proto__ property
    "no-redeclare": 1,               // disallow declaring the same variable more than once (recommended)
    "no-return-assign": 1,           // disallow use of assignment in return statement
    "no-return-await": 1,            // disallow unnecessary return await
    "no-script-url": 1,              // disallow use of javascript: urls.
    "no-self-assign": 1,             // disallow assignments where both sides are exactly the same
    "no-self-compare": 1,            // disallow comparisons where both sides are exactly the same
    "no-sequences": 1,               // disallow use of the comma operator
    "no-throw-literal": 1,           // restrict what can be thrown as an exception
    "no-unmodified-loop-condition": 1,//disallow unmodified loop conditions
    "no-unused-expressions": 1,      // disallow usage of expressions in statement position
    "no-unused-labels": 1,           // disallow unused labels
    "no-useless-call": 1,            // disallow unnecessary .call() and .apply()
    "no-useless-concat": 1,          // disallow unnecessary concatenation of literals or template literals
    "no-useless-escape": 1,          // disallow unnecessary escape characters
    "no-useless-return": 1,          // disallow redundant return statements
    "no-void": 1,                    // disallow use of the void operator
    "no-warning-comments": 1,        // disallow usage of configurable warning terms in comments - e.g. TODO or FIXME
    "no-with": 1,                    // disallow use of the with statement
    "radix": 1,                      // require use of the second argument for parseInt()
    "vars-on-top": 1,                // require declaration of all vars at the top of their containing scope
    "wrap-iife": 1,                  // require immediate function invocation to be wrapped in parentheses
    "yoda": 1,                       // require or disallow Yoda conditions

    // Strict Mode
    "strict": 2,                     // controls location of Use Strict Directives

    // Variables
    "init-declarations": 0,          // enforce or disallow variable initializations at definition
    "no-catch-shadow": 0,            // disallow the catch clause parameter name being the same as a variable in the outer scope
    "no-delete-var": 0,              // disallow deletion of variables (recommended)
    "no-label-var": 0,               // disallow labels that share a name with a variable
    "no-restricted-globals": 0,      // disallow specified global variables
    "no-shadow": 0,                  // disallow declaration of variables already declared in the outer scope
    "no-shadow-restricted-names": 0, // disallow shadowing of names such as arguments
    "no-undef": 0,                   // disallow use of undeclared variables unless mentioned in a /*global */ block (recommended)
    "no-undef-init": 0,              // disallow use of undefined when initializing variables
    "no-undefined": 0,               // disallow use of undefined variable
    "no-unused-vars": 1,             // disallow declaration of variables that are not used in the code (recommended)
    "no-use-before-define": 0,       // disallow use of variables before they are defined

    // Node.js and CommonJS
    "callback-return": 0,            // enforce return after a callback
    "global-require": 0,             // enforce require() on top-level module scope
    "handle-callback-err": 0,        // enforce error handling in callbacks
    "no-mixed-requires": 0,          // disallow mixing regular variable and require declarations
    "no-new-require": 0,             // disallow use of new operator with the require function
    "no-path-concat": 0,             // disallow string concatenation with __dirname and __filename
    "no-process-env": 0,             // disallow the use of process.env
    "no-process-exit": 0,            // disallow process.exit()
    "no-restricted-modules": 0,      // restrict usage of specified node modules
    "no-sync": 0,                    // disallow use of synchronous methods

    // Stylistic Issues
    "array-bracket-spacing": 1,      // enforce spacing inside array brackets (fixable)
    "block-spacing": [2,"always"],   // disallow or enforce spaces inside of single line blocks (fixable)
    "brace-style": [1, "1tbs"],      // enforce one true brace style
    "camelcase": 1,                  // require camel case names
    "capitalized-comments": 0,       // enforce or disallow capitalization of the first letter of a comment
    "comma-dangle": 1,               // require or disallow trailing commas
    "comma-spacing": 0,              // enforce spacing before and after comma (fixable)
    "comma-style": 1,                // enforce one true comma style
    "computed-property-spacing": 0,  // require or disallow padding inside computed properties (fixable)
    "consistent-this": 0,            // enforce consistent naming when capturing the current execution context
    "eol-last": 0,                   // enforce newline at the end of file, with no multiple empty lines (fixable)
    "func-call-spacing": 0,          // require or disallow spacing between function identifiers and their invocations
    "func-name-matching": 0,         // require function names to match the name of the variable or property to which they are assigned
    "func-names": 0,                 // require function expressions to have a name
    "func-style": 0,                 // enforce use of function declarations or expressions
    "id-blacklist": 0,               // disallow specified identifiers
    "id-length": 0,                  // this option enforces minimum and maximum identifier lengths (variable names, property names etc.)
    "id-match": 0,                   // require identifiers to match the provided regular expression
    "indent": [1, 2, {               // specify tab or space width for your code (fixable)
      "VariableDeclarator": {
        "var": 2,
        "let": 2,
        "const": 3
      }
    }],
    "jsx-quotes": 0,                 // specify whether double or single quotes should be used in JSX attributes
    "key-spacing": 0,                 // enforce spacing between keys and values in object literal properties
    "keyword-spacing": 0,            // enforce consistent spacing before and after keywords
    "line-comment-position": 0,      // enforce position of line comments
    "linebreak-style": 0,            // disallow mixed 'LF' and 'CRLF' as linebreaks
    "lines-around-comment": 0,       // enforce empty lines around comments
    "lines-around-directive": 0,     // require or disallow newlines around directives
    "max-depth": 0,                  // enforce a maximum depth that blocks can be nested
    "max-len": 0,                    // enforce a maximum line length
    "max-lines": 0,                  // enforce a maximum number of lines per file
    "max-nested-callbacks": 0,       // specify the maximum depth callbacks can be nested
    "max-params": 0,                 // enforce a maximum number of parameters in function definitions
    "max-statements": 0,             // enforce a maximum number of statements allowed in function blocks
    "max-statements-per-line": 0,    // enforce a maximum number of statements allowed per line
    "multiline-ternary": [1, "never"],// enforce newlines between operands of ternary expressions
    "new-cap": 0,                    // require a capital letter for constructors
    "new-parens": 0,                 // disallow the omission of parentheses when invoking a constructor with no arguments
    "newline-after-var": 1,          // require or disallow an empty newline after variable declarations
    "newline-before-return": 0,      // require an empty line before return statements
    "newline-per-chained-call": 0,   // require a newline after each call in a method chain
    "no-array-constructor": 1,       // disallow use of the Array constructor
    "no-bitwise": 0,                 // disallow bitwise operators
    "no-continue": 0,                // disallow use of the continue statement
    "no-inline-comments": 0,         // disallow comments inline after code
    "no-lonely-if": 1,               // disallow if as the only statement in an else block
    "no-mixed-operators": 0,         // disallow mixed binary operators
    "no-mixed-spaces-and-tabs": 1,   // disallow mixed spaces and tabs for indentation (recommended)
    "no-multi-assign": 0,            // disallow use of chained assignment expressions
    "no-multiple-empty-lines": 1,    // disallow multiple empty lines
    "no-negated-condition": 0,       // disallow negated conditions
    "no-nested-ternary": 0,          // disallow nested ternary expressions
    "no-new-object": 0,              // disallow the use of the Object constructor
    "no-plusplus": 0,                // disallow the unary operators ++ and --
    "no-restricted-syntax": 0,       // disallow use of certain syntax in code
    "no-tabs": 1,                    // disallow all tabs
    "no-ternary": 0,                 // disallow the use of ternary operators
    "no-trailing-spaces": 1,         // disallow trailing whitespace at the end of lines (fixable)
    "no-underscore-dangle": 0,       // disallow dangling underscores in identifiers
    "no-unneeded-ternary": 0,        // disallow the use of ternary operators when a simpler alternative exists
    "no-whitespace-before-property": 0, // disallow whitespace before properties
    "nonblock-statement-body-position": 0, // enforce the location of single-line statements
    "object-curly-newline": 0,       // enforce consistent line breaks inside braces
    "object-curly-spacing": 1,       // require or disallow padding inside curly braces (fixable)
    "object-property-newline": 0,    // enforce placing object properties on separate lines
    "one-var": 0,                    // require or disallow one variable declaration per function
    "one-var-declaration-per-line": 0, // require or disallow newlines around variable declarations
    "operator-assignment": 0,        // require assignment operator shorthand where possible or prohibit it entirely
    "operator-linebreak": 0,         // enforce operators to be placed before or after line breaks
    "padded-blocks": 0,              // enforce padding within blocks
    "quote-props": 0,                // require quotes around object literal property names
    "quotes": [2, "single"],         // specify whether backticks, double or single quotes should be used (fixable)
    "require-jsdoc": 0,              // Require JSDoc comment
    "semi": 0,                       // require or disallow use of semicolons instead of ASI (fixable)
    "semi-spacing": 0,               // enforce spacing before and after semicolons
    "sort-keys": 0,                  // require object keys to be sorted
    "sort-vars": 0,                  // sort variables within the same declaration block
    "space-before-blocks": 0,        // require or disallow a space before blocks (fixable)
    "space-before-function-paren": 0,// require or disallow a space before function opening parenthesis (fixable)
    "space-in-parens": 0,            // require or disallow spaces inside parentheses
    "space-infix-ops": 0,            // require spaces around operators (fixable)
    "space-unary-ops": 0,            // require or disallow spaces before/after unary operators (fixable)
    "spaced-comment": 0,             // require or disallow a space immediately following the // or /* in a comment
    "template-tag-spacing": 0,       // require or disallow spacing between template tags and their literals
    "unicode-bom": 0,                // require or disallow Unicode byte order mark (BOM)
    "wrap-regex": 0,                 // require regex literals to be wrapped in parentheses

    // ECMAScript 6
    "arrow-body-style": 0,           // require braces in arrow function body
    "arrow-parens": [1,"as-needed"], // require parens in arrow function arguments
    "arrow-spacing": 0,              // require space before/after arrow function's arrow (fixable)
    "constructor-super": 0,          // verify calls of super() in constructors
    "generator-star-spacing": 0,     // enforce spacing around the * in generator functions (fixable)
    "no-class-assign": 1,            // disallow modifying variables of class declarations
    "no-confusing-arrow": 0,         // disallow arrow functions where they could be confused with comparisons
    "no-const-assign": 1,            // disallow modifying variables that are declared using const
    "no-dupe-class-members": 2,      // disallow duplicate name in class members
    "no-duplicate-imports": 1,       // disallow duplicate module imports
    "no-new-symbol": 0,              // disallow new operators with the Symbol object
    "no-restricted-imports": 0,      // disallow specified modules when loaded by import
    "no-this-before-super": 0,       // disallow use of this/super before calling super() in constructors.
    "no-useless-computed-key": 0,    // disallow unnecessary computed property keys in object literals
    "no-useless-constructor": 1,     // disallow unnecessary constructors
    "no-useless-rename": 1,          // disallow renaming import, export, and destructured assignments to the same name
    "no-var": 1,                     // require let or const instead of var
    "object-shorthand": 1,           // require method and property shorthand syntax for object literals
    "prefer-arrow-callback": 0,      // suggest using arrow functions as callbacks
    "prefer-const": 1,               // suggest using const declaration for variables that are never modified after declared
    "prefer-destructuring": 0,       // require destructuring from arrays and/or objects
    "prefer-numeric-literals": 1,    // disallow parseInt() in favor of binary, octal, and hexadecimal literals
    "prefer-rest-params": 1,         // require rest parameters instead of arguments
    "prefer-spread": 1,              // suggest using the spread operator instead of .apply().
    "prefer-template": 1,            // suggest using template literals instead of strings concatenation
    "require-yield": 0,              // disallow generator functions that do not have yield
    "rest-spread-spacing": 0,        // enforce spacing between rest and spread operators and their expressions
    "sort-imports": 0,               // enforce sorted import declarations within modules
    "symbol-description": 0,         // require symbol descriptions
    "template-curly-spacing": 0,     // require or disallow spacing around embedded expressions of template strings
    "yield-star-spacing": 0,         // require or disallow spacing around the * in yield* expressions
  }
}
